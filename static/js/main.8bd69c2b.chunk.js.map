{"version":3,"sources":["Header.js","firebase.js","TinderCards.js","SwipeButtons.js","Chat.js","Chats.js","ChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["Header","backButton","useHistory","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TinderCards","useState","people","setPeople","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","className","person","key","name","perventSwipe","style","backgroundImage","url","SwipeButtons","IconButton","fontSize","Chat","message","timestamp","profilePic","to","Avatar","alt","src","Chats","ChatScreen","input","setInput","image","messages","setMessages","type","value","onChange","event","target","placeholder","disabled","onClick","preventDefault","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.8bd69c2b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport ForumIcon from \"@material-ui/icons/Forum\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\n\r\nfunction Header({ backButton }) {\r\n  const histroy = useHistory();\r\n\r\n  return (\r\n    // BEM\r\n    <div className=\"header\">\r\n      {backButton ? (\r\n        <IconButton onClick={() => histroy.replace(backButton)}>\r\n          <ArrowBackIosIcon fontSize=\"large\" className=\"header__icon\" />\r\n        </IconButton>\r\n      ) : (\r\n        <IconButton>\r\n          <PersonIcon className=\"header__icon\" fontSize=\"large\" />\r\n        </IconButton>\r\n      )}\r\n\r\n      <Link to=\"/\">\r\n        <img\r\n          className=\"header__logo\"\r\n          src=\"https://1000logos.net/wp-content/uploads/2018/07/tinder-logo.png\"\r\n          alt=\"Tinder-logo\"\r\n        />\r\n      </Link>\r\n\r\n      <Link to=\"/chat\">\r\n        <IconButton>\r\n          <ForumIcon className=\"header__icon\" fontSize=\"large\" />\r\n        </IconButton>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyDloiMefI3ktfMQOD0jvvC1uPo5pSY3PKw\",\r\n  authDomain: \"tinder-clone-1bf69.firebaseapp.com\",\r\n  databaseURL: \"https://tinder-clone-1bf69.firebaseio.com\",\r\n  projectId: \"tinder-clone-1bf69\",\r\n  storageBucket: \"tinder-clone-1bf69.appspot.com\",\r\n  messagingSenderId: \"644915904795\",\r\n  appId: \"1:644915904795:web:94106a9ec6811df55d53be\",\r\n  measurementId: \"G-3333MZ26C2\",\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TinderCard from \"react-tinder-card\";\r\nimport \"./TinderCards.css\";\r\nimport db from \"./firebase\";\r\n\r\nfunction TinderCards() {\r\n  const [people, setPeople] = useState([]);\r\n  //const people = []; above are same but using state\r\n\r\n  useEffect(() => {\r\n    db.collection(\"people\").onSnapshot((snapshot) =>\r\n      setPeople(snapshot.docs.map((doc) => doc.data()))\r\n    );\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"tinderCards__cardContainer\">\r\n        {people.map((person) => (\r\n          <TinderCard\r\n            className=\"swipe\"\r\n            key={person.name}\r\n            perventSwipe={[\"up\", \"down\"]}\r\n          >\r\n            <div\r\n              style={{ backgroundImage: `url(${person.url})` }}\r\n              className=\"card\"\r\n            >\r\n              <h3>{person.name}</h3>\r\n            </div>\r\n          </TinderCard>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TinderCards;\r\n","import React from \"react\";\r\nimport \"./SwipeButton.css\";\r\nimport ReplayIcon from \"@material-ui/icons/Replay\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport StarRateIcon from \"@material-ui/icons/StarRate\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nconst SwipeButtons = () => {\r\n  return (\r\n    <div className=\"swipeButtons\">\r\n      <IconButton className=\"swipeButtons__repeat\">\r\n        <ReplayIcon fontSize=\"large\" />\r\n      </IconButton>\r\n      <IconButton className=\"swipeButtons__left\">\r\n        <CloseIcon fontSize=\"large\" />\r\n      </IconButton>\r\n      <IconButton className=\"swipeButtons__star\">\r\n        <StarRateIcon fontSize=\"large\" />\r\n      </IconButton>\r\n      <IconButton className=\"swipeButtons__right\">\r\n        <FavoriteIcon fontSize=\"large\" />\r\n      </IconButton>\r\n      <IconButton className=\"swipeButtons__lightning\">\r\n        <FlashOnIcon fontSize=\"large\" />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SwipeButtons;\r\n","import React from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport \"./Chat.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Chat({ name, message, timestamp, profilePic }) {\r\n  return (\r\n    <Link to={`/chat/${name}`}>\r\n      <div className=\"chat\">\r\n        <Avatar className=\"chat__image\" alt={name} src={profilePic} />\r\n        <div className=\"chat__details\">\r\n          <h2>{name}</h2>\r\n          <p>{message}</p>\r\n        </div>\r\n        <p className=\"chat__timestamp\">{timestamp}</p>\r\n      </div>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport \"./Chats.css\";\r\nimport Chat from \"./Chat\";\r\n\r\nfunction Chats() {\r\n  return (\r\n    <div className=\"chats\">\r\n      <Chat\r\n        name=\"mark\"\r\n        message=\"How are you...\"\r\n        timestamp=\"12 minutes ago\"\r\n        profilePic=\"https://dfjc3etzov2zz.cloudfront.net/wp-content/uploads/2018/04/Mark-Zuckerberg-Forbes.jpg\"\r\n      />\r\n      <Chat\r\n        name=\"Klaus\"\r\n        message=\"Hello Love\"\r\n        timestamp=\"30 minutes ago\"\r\n        profilePic=\"https://a.wattpad.com/cover/214406620-352-k870066.jpg\"\r\n      />\r\n      <Chat\r\n        name=\"Stiles\"\r\n        message=\"Whats up bro...\"\r\n        timestamp=\"3 days ago\"\r\n        profilePic=\"https://vignette.wikia.nocookie.net/mythara/images/6/60/StilesStilinski.jpg/revision/latest/top-crop/width/360/height/450?cb=20161213070309\"\r\n      />\r\n      <Chat\r\n        name=\"Kratos\"\r\n        message=\"Boi !!!\"\r\n        timestamp=\"2 week ago\"\r\n        profilePic=\"https://vignette.wikia.nocookie.net/godofwar/images/e/e8/Norse_Kratos.png/revision/latest?cb=20181207151509\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chats;\r\n","import React, { useState } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport \"./ChatScreen.css\";\r\n\r\nfunction ChatScreen() {\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      name: \"mark\",\r\n      image:\r\n        \"https://dfjc3etzov2zz.cloudfront.net/wp-content/uploads/2018/04/Mark-Zuckerberg-Forbes.jpg\",\r\n      message: \"Yo whats up \",\r\n    },\r\n    {\r\n      name: \"mark\",\r\n      image:\r\n        \"https://dfjc3etzov2zz.cloudfront.net/wp-content/uploads/2018/04/Mark-Zuckerberg-Forbes.jpg\",\r\n      message: \"How are you...\",\r\n    },\r\n  ]);\r\n\r\n  const handleSend = (event) => {\r\n    event.preventDefault();\r\n\r\n    setMessages([...messages, { message: input }]);\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"chatScreen\">\r\n      <p className=\"chatScreen__timeStamp\">YOU MATCHED WITH MARK ON 10/07/29</p>\r\n      {messages.map((message) =>\r\n        message.name ? (\r\n          <div className=\"chatScreen__message\">\r\n            <Avatar\r\n              className=\"chatScreen__image\"\r\n              alt={message.name}\r\n              src={message.image}\r\n            />\r\n            <p className=\"chatScreen__text\">{message.message}</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"chatScreen__message\">\r\n            <p className=\"chatScreen__textUser\">{message.message}</p>\r\n          </div>\r\n        )\r\n      )}\r\n\r\n      <form className=\"chatScreen__input\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(event) => setInput(event.target.value)}\r\n          className=\"chatScreen__inputField\"\r\n          placeholder=\"Type a message...\"\r\n        />\r\n        <button\r\n          disabled={!input}\r\n          type=\"submit\"\r\n          onClick={handleSend}\r\n          className=\"chatScreen__inputButton\"\r\n        >\r\n          send\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatScreen;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport TinderCards from \"./TinderCards\";\nimport SwipeButtons from \"./SwipeButtons\";\nimport Chats from \"./Chats\";\nimport ChatScreen from \"./ChatScreen\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Router>\n        <Switch>\n          <Route path=\"/chat/:person\">\n            <Header backButton=\"/chat\" />\n            <ChatScreen />\n          </Route>\n\n          <Route path=\"/chat\">\n            <Header backButton=\"/\" />\n            <Chats />\n          </Route>\n\n          <Route path=\"/\">\n            <Header />\n            <TinderCards />\n            <SwipeButtons />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}